module keyboard (

 clk		, 		// input 50 MHz clk
 ps_clk 	, 		// ps2 clock
 ps_data	, 
 hex_out 
 );			


 input clk;
 input ps_data;
 input ps_clk;
 output reg [13:0]hex_out;
 


 
 //internal registers
  

 reg [7:0] counter;
 reg [10:0] data;
 reg valid;
 reg cnt;
 reg cnt2;



///////////////////////////////////////
/////// counters enables       ////////
///////////////////////////////////////	

wire cnt1 = (counter >= 8'd11 )? 1'b1 : 1'b0;

/////////////////////////////
/// clock for PS2      //////
/////////////////////////////	

	 always @ (negedge ps_clk or posedge cnt1 )
	 
	 begin 
	 
		if (cnt1)
		begin
			counter <= 0;
			cnt <= 1;
		end
		
			else
			
		begin
			
			counter <= counter + 1;
			cnt <= 0;
			
		end	
	end
	
	
/////////////////////////////////////////////////////////////////////
/// Serial shift register to reteive data from the PS_data line   ///
/////////////////////////////////////////////////////////////////////

	
always @ (negedge ps_clk or  posedge cnt )

 begin
 
 if (cnt) begin  valid <= 1; end
 
 else
 
 case (counter)
 	
		8'd0	: begin valid = 1; data[0] = ps_data; end // start
		8'd1	: begin valid = 0; data[1] = ps_data; end // bit 0
		8'd2	: begin valid = 0; data[2] = ps_data; end // bit 1
		8'd3	: begin valid = 0; data[3] = ps_data; end // bit 2 	
		8'd4	: begin valid = 0; data[4] = ps_data; end // bit 3
		
		8'd5	: begin valid = 0; data[5] = ps_data; end // bit 4
		8'd6	: begin valid = 0; data[6] = ps_data; end // bit 5		
		8'd7	: begin valid = 0; data[7] = ps_data; end // bit 6
		8'd8	: begin valid = 0; data[8] = ps_data; end // bit 7
		
		8'd9	: begin valid = 1; data[9] = ps_data; end // parity
		8'd10 : begin valid = 1; data[10] = ps_data; end // stop
		8'd11	: begin valid = 1; end 
		8'd12	: begin valid = 1; end

	endcase
end
	
 
///////////////////////////////////////////////////////////////////////////
/// compare and select key code value to be displayed on HEX displays   ///
///////////////////////////////////////////////////////////////////////////

 always @(posedge clk )	
 
	begin
	
		
		hex_out = 14'b11111111111111;   // default setting

		
		if (data[8:1] == 8'b00011100) begin   
		hex_out <= 8'b00011100; 
		end
		
		else
		
		if (data[8:1] == 8'b00110010) begin
		hex_out <= 8'b00110010;
		end
		
		else
		
		if (data[8:1] == 8'b00100001) begin  
		hex_out <= 8'b00100001; 
		end
		
		else
		
		if (data[8:1] == 8'b00100011) begin  
		hex_out <= 8'b00100011; 
		end
		
		if (data[8:1] == 8'b00100100) begin  
		hex_out <= 8'b00100100; 
		end
		
		else
		
		if (data[8:1] == 8'b00101011) begin  
		hex_out <= 8'b00101011; 
		end
		
		else
		
		if (data[8:1] == 8'b00110100) begin  
		hex_out <= 8'b00110100; 
		end
		
		else

		if (data[8:1] == 8'b00110011) begin  
		hex_out <= 8'b00110011; 
		end
		
		else
		
		if (data[8:1] == 8'b01000011) begin  
		hex_out <= 8'b01000011; 
		end
		
		else
		
		if (data[8:1] == 8'b00111011) begin  
		hex_out <= 8'b00111011; 
		end
		
		else
		
		if (data[8:1] == 8'b01000010) begin  
		hex_out <= 8'b01000010; 
		end
		
		else 
		
		if (data[8:1] == 8'b01001011) begin  
		hex_out <= 8'b01001011; 
		end
		
		else
		
		if (data[8:1] == 8'b00111010) begin  
		hex_out <= 8'b00111010; 
		end
		
		else
		
		if (data[8:1] == 8'b00110001) begin  
		hex_out <= 8'b00110001; 
		end
		
		else
		
		if (data[8:1] == 8'b01000100) begin  
		hex_out <= 8'b01000100; 
		end
		
		else
		
		if (data[8:1] == 8'b01001101) begin  
		hex_out <= 8'b01001101; 
		end
		
		else
		
		if (data[8:1] == 8'b00010101) begin  
		hex_out <= 8'b00010101; 
		end
		
		else
		
		if (data[8:1] == 8'b00101101) begin  
		hex_out <= 8'b00101101; 
		end
		
		else
		
		if (data[8:1] == 8'b00011011) begin  
		hex_out <= 8'b00011011; 
		end
		
		if (data[8:1] == 8'b00101100) begin  
		hex_out <= 8'b00101100; 
		end
		
		else
		
		if (data[8:1] == 8'b00111100) begin  
		hex_out <= 8'b00111100; 
		end
		
		else
		
		if (data[8:1] == 8'b00101010) begin  
		hex_out <= 8'b00101010; 
		end
		
		else
		
		if (data[8:1] == 8'b00011101) begin  
		hex_out <= 8'b00011101; 
		end
		
		else
		
		if (data[8:1] == 8'b00100010) begin  
		hex_out <= 8'b00100010; 
		end
		
		else
		
		if (data[8:1] == 8'b00110101) begin  
		hex_out <= 8'b00110101; 
		end
		
		else
		
		if (data[8:1] == 8'b00011010) begin  
		hex_out <= 8'b00011010; 
		end
		

end
	


endmodule
